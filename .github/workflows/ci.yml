name: CI

on:
  push:
    branches:
      - main
      - master
  pull_request:
  release:
    types:
      - created
      - published

jobs:
  prerequisites:
    name: Test and Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Tests
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      - run: go test -race -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: coverage.txt
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Run Linter
        uses: golangci/golangci-lint-action@v7
        with:
          version: v2.0

  docker_build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [prerequisites]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set Docker image tag
        id: set-tag
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            echo "tag_name=${GITHUB_SHA}" >> $GITHUB_ENV
          fi

      - name: Build and push Docker images
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ env.tag_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-helm:
    runs-on: ubuntu-latest
    needs: [docker_build]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
        - name: Checkout Code
          uses: actions/checkout@v4

        - name: Set up Kubernetes context
          run: |
            mkdir -p ${HOME}/.kube
            echo "${{ secrets.KUBECONFIG }}" > ${HOME}/.kube/config
  
        - name: Install Helm
          uses: azure/setup-helm@v4

        - name: Set image tag
          id: set-image-tag
          run: |
            if [[ $GITHUB_REF == refs/tags/* ]]; then
              echo "image_tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
            else
              echo "image_tag_name=${GITHUB_SHA}" >> $GITHUB_ENV
            fi

        - name: Deploy Helm Chart
          run: |
            for i in $(seq 0 $(( ${{ secrets.DISCORD_SHARD_COUNT }} - 1))); do
              helm upgrade --install ${{ github.event.repository.name }}-$i charts/${{ github.event.repository.name }} \
                --atomic \
                --force \
                --namespace kaellybot \
                --create-namespace \
                --set image.tag="${{ env.image_tag_name }}" \
                --set secrets.DISCORD_TOKEN="${{ secrets.DISCORD_TOKEN }}" \
                --set-string secrets.DISCORD_SHARD_ID="$i" \
                --set-string secrets.DISCORD_SHARD_COUNT="${{ secrets.DISCORD_SHARD_COUNT }}" \
                --set secrets.MYSQL_URL="${{ secrets.MYSQL_URL }}" \
                --set secrets.MYSQL_USER="${{ secrets.MYSQL_USER }}" \
                --set secrets.MYSQL_PASSWORD="${{ secrets.MYSQL_PASSWORD }}" \
                --set secrets.MYSQL_DATABASE="${{ secrets.MYSQL_DATABASE }}" \
                --set secrets.RABBITMQ_ADDRESS="${{ secrets.RABBITMQ_ADDRESS }}" \
                --set-string secrets.ABOUT_ID="${{ secrets.ABOUT_ID }}" \
                --set-string secrets.ALIGN_ID="${{ secrets.ALIGN_ID }}" \
                --set-string secrets.ALMANAX_ID="${{ secrets.ALMANAX_ID }}" \
                --set-string secrets.CONFIG_ID="${{ secrets.CONFIG_ID }}" \
                --set-string secrets.HELP_ID="${{ secrets.HELP_ID }}" \
                --set-string secrets.ITEM_ID="${{ secrets.ITEM_ID }}" \
                --set-string secrets.JOB_ID="${{ secrets.JOB_ID }}" \
                --set-string secrets.MAP_ID="${{ secrets.MAP_ID }}" \
                --set-string secrets.SET_ID="${{ secrets.SET_ID }}" \
                --set configMap.PROBE_PORT="${{ secrets.PROBE_PORT }}" \
                --set configMap.METRIC_PORT="${{ secrets.METRIC_PORT }}" \
                --set configMap.LOG_LEVEL="${{ secrets.LOG_LEVEL }}" \
                --set-string configMap.PRODUCTION="${{ secrets.PRODUCTION }}"
            done
